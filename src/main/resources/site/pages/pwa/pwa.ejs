<!DOCTYPE html>
<html lang="en">
<head>
    <base href="{{baseHref}}">
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta name="mobile-web-app-capable" content="yes">
    <title>Office League</title>

    <link rel="apple-touch-icon" sizes="180x180" href="{{assetsUrl}}/icons/apple-touch-icon.png">
    <link rel="icon" type="image/png" href="{{assetsUrl}}/icons/favicon-32x32.png" sizes="32x32">
    <link rel="icon" type="image/png" href="{{assetsUrl}}/icons/favicon-16x16.png" sizes="16x16">
    <link rel="manifest" href="{{baseHref}}manifest.json">
    <link rel="mask-icon" href="{{assetsUrl}}/icons/safari-pinned-tab.svg" color="#142663">
    <meta name="theme-color" content="#ffffff">

    <% for (key in htmlWebpackPlugin.files.css) { %>
    <% item = htmlWebpackPlugin.files.css[key]; %>
    <link rel="stylesheet" href="<%= '{{baseHref}}' + item %>" media="none" onload="if(media!='all')media='all'"/>
    <% }; %>

    <style type="text/css">
        /* Define styles here to show them instantly while css is being loaded */
        body {
            background-color: #1C2641;
        }
        .office-league-loader {
            display: block;
            height: 200px;
            top: 50%;
            position: absolute;
            left: 50%;
            margin: -100px 0 0 -80px;
        }
    </style>
</head>

<body>

<office-league>
    <img class="office-league-loader" src="{{assetsUrl}}/img/office-league-loader.svg"></img>
<!--    <div class="loading">
        <div class="loading&#45;&#45;1"></div>
        <div class="loading&#45;&#45;2"></div>
        <div class="loading&#45;&#45;3"></div>
    </div>-->
</office-league>

</body>

<script type="text/javascript">
    var XPCONFIG = {
        locale: '{{{locale}}}',
        {{#user}}user: {{{.}}},{{/user}}
        baseHref: '{{{baseHref}}}',
        assetsUrl: '{{{assetsUrl}}}',
        audioUrl: '{{{audioUrl}}}',
        loginUrl: '{{{loginUrl}}}',
        logoutUrl: '{{{logoutUrl}}}',
        logoutMarketingUrl: '{{{logoutMarketingUrl}}}',
        graphQlUrl: '{{baseHref}}api/graphql',
        setImageUrl: '{{setImageUrl}}',
        liveGameUrl: '{{liveGameUrl}}'
    }
    {{#isLive}}
    var serviceWorker;
    if ('serviceWorker' in navigator) {
        navigator.serviceWorker
            .getRegistration()
            .then(registerServiceWorker)
            .then(postAssets)
            .then(requestNotificationPermission)
            .then(subscribeToPushManager)
            .then((value) => {console.log(value);console.log(JSON.stringify(value))});
    }
    
    function registerServiceWorker(registration) {
        if (!!registration && registration.active) {
            console.log('Detected active Service Worker with scope ' + registration.scope);
            return registration;
        }
        else {
            return navigator.serviceWorker
                .register('../service-worker.js', {scope: '{{siteUrl}}/app'})
                .then(function (registration) {
                    console.log('Service Worker registered with scope ' + registration.scope);
                    return registration;
                }, function () {
                    console.log('Service Worker registration failure.');
                })
        }    
    }
    
    function postAssets(registration) {
        let serviceWorker = registration.installing || registration.active;
        if (serviceWorker) {
            let assets = [];
            <% for (key in htmlWebpackPlugin.files.chunks) { %>
            <%      item = htmlWebpackPlugin.files.chunks[key].entry; %>
            assets.push('<%= '{{baseHref}}' + item %>');
            <% }; %>
            <% for (key in htmlWebpackPlugin.files.css) { %>
            <%      item = htmlWebpackPlugin.files.css[key]; %>
            assets.push('<%= '{{baseHref}}' + item %>');
            <% }; %>

            if (assets.length > 0) {
                serviceWorker.postMessage({
                    assets: assets
                });
            }
        }
        return registration;     
    }
    
    function requestNotificationPermission(registration) {
        return new Promise(function(resolve, reject) {
            const permissionRequestResult = Notification.requestPermission(function(result) {
              resolve(result);
            });
        
            if (permissionRequestResult) {
              permissionRequestResult.then(resolve, reject);
            }
        })
        .then(function(permissionRequestResult) {
            console.log('Notification permission request ', permissionRequestResult);
            if (permissionRequestResult !== 'granted') {
              throw new Error('Notification permission not granted.');
            }
            return registration;
        });   
    }
    
    function subscribeToPushManager(registration) {
        const subscribeOptions = {
            userVisibleOnly: true,
            applicationServerKey: base64StringToUint8Array(
              'BBb9jCg9kjkhCufCy27_Yxa0KVYxU19ClJKKuYfBIkh4dGJYa3niCjX8V3xou6JBRdgiZFZNynqmhL1AyLRsp5o'
            )
        };
        return registration.pushManager.subscribe(subscribeOptions); 
    }
    
    function base64StringToUint8Array(base64String) {
      const padding = '='.repeat((4 - base64String.length % 4) % 4);
      const paddedBase64String = (base64String + padding)
        .replace(/\-/g, '+')
        .replace(/_/g, '/');
    
      const rawData = window.atob(paddedBase64String);
      const uint8Array = new Uint8Array(rawData.length);
    
      for (let i = 0; i < rawData.length; ++i) {
        uint8Array[i] = rawData.charCodeAt(i);
      }
      return uint8Array;
    }
    {{/isLive}}
</script>

<% for (key in htmlWebpackPlugin.files.chunks) { %>
<% item = htmlWebpackPlugin.files.chunks[key].entry; %>
<script type="text/javascript" src="<%= '{{baseHref}}' + item %>"></script>
<% }; %>

</html>